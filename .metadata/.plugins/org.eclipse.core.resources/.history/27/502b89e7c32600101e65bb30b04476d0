package service;

import model.*;

import java.time.DayOfWeek;
import java.util.*;
import java.util.stream.Collectors;

public class AsignadorHorarios {

    public static void asignarSemana(Semana semana, List<Trabajador> trabajadores) {
        Map<Trabajador, Integer> contadorDias = new HashMap<>();
        Map<Set<Trabajador>, Integer> contadorParejas = new HashMap<>();
        Set<Trabajador> trabajaronDomingoPasado = new HashSet<>();

        // Inicializamos contadores y analizamos historial
        for (Trabajador t : trabajadores) {
            contadorDias.put(t, 0);

            for (Semana s : t.getHistorialSemanas()) {
                for (DiaTrabajo d : s.getDias()) {
                	List<Trabajador> asignados = d.getAsignaciones().values().stream()
                		    .flatMap(set -> set.stream())
                		    .collect(Collectors.toList());
                    if (asignados.contains(t)) {
                        contadorDias.put(t, contadorDias.get(t) + 1);

                        // Registro de domingos anteriores
                        if (d.getFecha().getDayOfWeek() == DayOfWeek.SUNDAY) {
                            trabajaronDomingoPasado.add(t);
                        }

                        // Registro de parejas anteriores
                        for (int i = 0; i < asignados.size(); i++) {
                            for (int j = i + 1; j < asignados.size(); j++) {
                                Set<Trabajador> pareja = new HashSet<>(Arrays.asList(asignados.get(i), asignados.get(j)));
                                contadorParejas.put(pareja, contadorParejas.getOrDefault(pareja, 0) + 1);
                            }
                        }
                    }
                }
            }
        }

        Set<Trabajador> trabajanDomingoEstaSemana = new HashSet<>();

        for (DiaTrabajo dia : semana.getDias()) {
            DayOfWeek diaSemana = dia.getFecha().getDayOfWeek();
            List<Turno> turnos = Arrays.asList(Turno.MANIANA, Turno.TARDE);

            for (Turno turno : Turno.values()) {

                // Filtrar candidatos
                List<Trabajador> disponibles = trabajadores.stream()
                        .filter(t -> !t.pidioFranco(dia.getFecha()))
                        .filter(t -> !(diaSemana == DayOfWeek.SUNDAY && trabajaronDomingoPasado.contains(t)))
                        .filter(t -> !(diaSemana == DayOfWeek.MONDAY && trabajanDomingoEstaSemana.contains(t)))
                        .filter(t -> contadorDias.get(t) < 6)
                        .filter(t -> !dia.estaAsignado(turno, t))
                        .filter(t -> !dia.estaAsignadoEnDia(t))
                        .collect(Collectors.toList());

                // Generar todas las combinaciones posibles de 2 trabajadores
                List<Set<Trabajador>> posiblesParejas = new ArrayList<>();
                for (int i = 0; i < disponibles.size(); i++) {
                    for (int j = i + 1; j < disponibles.size(); j++) {
                        Set<Trabajador> pareja = new HashSet<>(Arrays.asList(disponibles.get(i), disponibles.get(j)));
                        posiblesParejas.add(pareja);
                    }
                }

                // Elegir la mejor pareja: la menos repetida
                posiblesParejas.sort(Comparator.comparingInt(p -> contadorParejas.getOrDefault(p, 0)));

                // Selección aleatoria entre las mejores (menos repetidas)
                int minRepeticiones = posiblesParejas.isEmpty() ? 0 :
                        contadorParejas.getOrDefault(posiblesParejas.get(0), 0);

                List<Set<Trabajador>> mejores = posiblesParejas.stream()
                        .filter(p -> contadorParejas.getOrDefault(p, 0) == minRepeticiones)
                        .collect(Collectors.toList());

                if (!mejores.isEmpty()) {
                    Set<Trabajador> elegida = mejores.get(new Random().nextInt(mejores.size()));
                    Iterator<Trabajador> it = elegida.iterator();
                    Trabajador t1 = it.next();
                    Trabajador t2 = it.next();

                    dia.asignar(turno, t1);
                    dia.asignar(turno, t2);

                    contadorDias.put(t1, contadorDias.get(t1) + 1);
                    contadorDias.put(t2, contadorDias.get(t2) + 1);

                    contadorParejas.put(elegida, contadorParejas.getOrDefault(elegida, 0) + 1);

                    if (diaSemana == DayOfWeek.SUNDAY) {
                        trabajanDomingoEstaSemana.add(t1);
                        trabajanDomingoEstaSemana.add(t2);
                    }
                }
            }
        }

        // Guardar la semana en el historial
        for (Trabajador t : trabajadores) {
            t.agregarSemana(semana);
        }
    }
}
